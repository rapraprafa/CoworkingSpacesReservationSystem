/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Rafamus
 */

import java.util.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import org.joda.time.*;

public class AddReservation extends javax.swing.JFrame {

    /**
     * Creates new form AddReservation
     */
    public AddReservation() {
        initComponents();
        FillItemNameCombo();
    }

    private void FillItemNameCombo(){
        roomOpt.setActionCommand("roomOpt");
        tableOpt.setActionCommand("tableOpt");
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coworkingspacesreservation?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","root", "15264859");
            if ("roomOpt".equals(roomortable.getSelection().getActionCommand())){
                String query = "select * from rooms";
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery();
                while (rs.next()){
                    String servicename = rs.getString("room_name");
                    itemNameCombo.addItem(servicename);
                }
            }
            else if ("tableOpt".equals(roomortable.getSelection().getActionCommand())){
                String query = "select * from tables";
                PreparedStatement pst = con.prepareStatement(query);
                ResultSet rs = pst.executeQuery();
                while (rs.next()){
                    String servicename = rs.getString("table_name");
                    itemNameCombo.addItem(servicename);
                }
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomortable = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        itemID = new javax.swing.JTextField();
        itemNameCombo = new javax.swing.JComboBox<>();
        fromdate = new com.toedter.calendar.JDateChooser();
        todate = new com.toedter.calendar.JDateChooser();
        roomOpt = new javax.swing.JRadioButton();
        tableOpt = new javax.swing.JRadioButton();
        reservationPrice = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        SpinnerNumberModel sm = new SpinnerNumberModel(00, 0, 23, 1);
        fromtime = new javax.swing.JSpinner(sm);
        SpinnerNumberModel sm4 = new SpinnerNumberModel(00, 0, 23, 1);
        totime = new javax.swing.JSpinner(sm4);
        jLabel11 = new javax.swing.JLabel();
        SpinnerNumberModel sm2 = new SpinnerNumberModel(00,0,59,1);
        fromtime1 = new javax.swing.JSpinner(sm2);
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        SpinnerNumberModel sm5 = new SpinnerNumberModel(00, 0, 59, 1);
        totime1 = new javax.swing.JSpinner(sm5);
        jLabel15 = new javax.swing.JLabel();
        backgroundBlue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Reservation");
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ADD RESERVATION");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(90, 0, 130, 20);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Customer Name");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(100, 60, 100, 30);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText(" Room or Table");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(100, 110, 100, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Item Name");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(120, 160, 80, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("  From (Date)");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(110, 260, 90, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("From (Time)");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(370, 260, 80, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("To (Date)");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(130, 330, 70, 30);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("To (Time)");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(380, 330, 70, 30);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Price");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(270, 400, 40, 30);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("  Item ID");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(130, 210, 70, 30);
        getContentPane().add(customerName);
        customerName.setBounds(200, 60, 380, 30);

        itemID.setEditable(false);
        itemID.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(itemID);
        itemID.setBounds(200, 210, 380, 30);

        itemNameCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                itemNameComboPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        itemNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameComboActionPerformed(evt);
            }
        });
        getContentPane().add(itemNameCombo);
        itemNameCombo.setBounds(200, 160, 380, 30);

        fromdate.setMinSelectableDate(Calendar.getInstance().getTime());
        getContentPane().add(fromdate);
        fromdate.setBounds(200, 260, 160, 30);

        todate.setMinSelectableDate(Calendar.getInstance().getTime());
        getContentPane().add(todate);
        todate.setBounds(200, 330, 160, 30);

        roomortable.add(roomOpt);
        roomOpt.setForeground(new java.awt.Color(255, 255, 255));
        roomOpt.setSelected(true);
        roomOpt.setText("Room");
        roomOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomOptActionPerformed(evt);
            }
        });
        getContentPane().add(roomOpt);
        roomOpt.setBounds(200, 110, 70, 30);

        roomortable.add(tableOpt);
        tableOpt.setForeground(new java.awt.Color(255, 255, 255));
        tableOpt.setText("Table");
        tableOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableOptActionPerformed(evt);
            }
        });
        getContentPane().add(tableOpt);
        tableOpt.setBounds(280, 110, 60, 30);
        getContentPane().add(reservationPrice);
        reservationPrice.setBounds(310, 400, 140, 30);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(240, 450, 100, 23);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(360, 450, 100, 23);
        getContentPane().add(fromtime);
        fromtime.setBounds(450, 260, 50, 30);
        getContentPane().add(totime);
        totime.setBounds(450, 330, 50, 30);

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Hour");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(460, 290, 30, 14);
        getContentPane().add(fromtime1);
        fromtime1.setBounds(530, 260, 50, 30);

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Minute");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(540, 290, 50, 14);

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Hour");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(460, 360, 40, 14);

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Minute");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(540, 360, 41, 14);
        getContentPane().add(totime1);
        totime1.setBounds(530, 330, 50, 30);

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coworkingspacesreservation/icons8-close-window-30.png"))); // NOI18N
        jLabel15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel15.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel15MouseMoved(evt);
            }
        });
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel15MouseExited(evt);
            }
        });
        getContentPane().add(jLabel15);
        jLabel15.setBounds(670, 0, 30, 30);

        backgroundBlue.setForeground(new java.awt.Color(255, 255, 255));
        backgroundBlue.setIcon(new ImageIcon(new javax.swing.ImageIcon(getClass().getResource("/coworkingspacesreservation/adminb.jpg")).getImage().getScaledInstance(700, 500, Image.SCALE_SMOOTH)));
        getContentPane().add(backgroundBlue);
        backgroundBlue.setBounds(0, 0, 700, 500);

        setSize(new java.awt.Dimension(716, 539));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if ("".equals(itemID.getText())){
            JOptionPane.showMessageDialog(null, "Please select an item to reserve.");
        }
        else if("".equals(customerName.getText())){
            JOptionPane.showMessageDialog(null, "Please indicate customer's name.");
        }
        else if("".equals(DateFormat.getInstance().format(fromdate.getDate())) || "".equals(DateFormat.getInstance().format(todate.getDate()))){
            JOptionPane.showMessageDialog(null, "Please indicate both dates.");
        }
        else{
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        String startdate = sdf.format(fromdate.getDate());
        String enddate = sdf.format(todate.getDate());
        Double startdatefinal = Double.parseDouble(startdate);
        Double enddatefinal = Double.parseDouble(enddate);
        try {
        fromtime.commitEdit();
        } catch ( java.text.ParseException e ) {
            System.out.println(e);
        }
        try {
        totime.commitEdit();
        } catch ( java.text.ParseException e ) {
            System.out.println(e);
        }
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("HH:mm");
        String starttime = fromtime.getValue().toString();
        String starttime1 = fromtime1.getValue().toString();
        String endtime = totime.getValue().toString();
        String endtime1 = totime1.getValue().toString();
        Double starttimedouble = Double.parseDouble(starttime);
        Double starttime1double = Double.parseDouble(starttime1);
        Double endtimedouble = Double.parseDouble(endtime);
        Double endtime1double = Double.parseDouble(endtime1);
        Double starttimefinal = (starttimedouble/24) + (starttime1double/1440);
        Double endtimefinal = (endtimedouble/24) + (endtime1double/1440);
        System.out.println(startdate);
        System.out.println(enddate);
        System.out.println(starttimefinal);
        System.out.println(endtimefinal);
        
        Double startfinal = startdatefinal + starttimefinal;
        Double endfinal = enddatefinal + endtimefinal;
        boolean valid = true;
        boolean validCredentials = true;
        
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coworkingspacesreservation?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","root", "15264859");
            String query1 = "select * from reservations WHERE item_id = '"+itemID.getText()+"' && done = 0";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query1);
            while (rs.next()){
                double start = Double.valueOf(rs.getDouble("start"));
                double end = Double.valueOf(rs.getDouble("end"));
                double startdate1 = Double.valueOf(rs.getDouble("startdate"));
                double enddate1 = Double.valueOf(rs.getDouble("enddate"));
            if (startfinal == start){
                System.out.println("dumaan dito 1");
                valid = false;
                break;
            }
            if ((startfinal + (endfinal-startfinal) > start) && (startfinal + (endfinal-startfinal) <= end)){
                System.out.println("dumaan dito 2");
                valid = false;
                break;
            }
            if (startfinal < end && endfinal >= end){
                System.out.println("dumaan dito 3");
                valid = false;
                break;
            }
            if (startfinal <= start && endfinal >= end){
                System.out.println("dumaan dito 4");
                valid = false;
                break;
            }

            if (startfinal >= start && endfinal <= end){
                System.out.println("dumaan dito 6");
                valid = false;
                break;
            }
            
            }
            
            if (startfinal >= endfinal){
                System.out.println("dumaan dito 7");
                valid = false;
            }
            
            if (endfinal < startfinal){
                System.out.println("dumaan dito 77");
                valid = false;
            }
            
            if(!valid){
                System.out.println("dumaan dito 8");
                JOptionPane.showMessageDialog(null, "This date and time is not available for now!");
            }
            else{
                System.out.println("Pumasok sya dito 9");
                roomOpt.setActionCommand("roomquery");
                tableOpt.setActionCommand("tablequery");
                String query = "insert into reservations (customer_name,roomOrtable,item_id,item_name,startdate,enddate,start,end,price) values (?,?,?,?,?,?,?,?,?)";
                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, customerName.getText());
                roomOpt.setActionCommand("Room");
                tableOpt.setActionCommand("Table");
                String selection = roomortable.getSelection().getActionCommand().toString();
                pst.setString(2, selection);
                pst.setString(3, itemID.getText());
                pst.setString(4, itemNameCombo.getSelectedItem().toString());
                String date11 = String.valueOf(startdatefinal);
                String date12 = String.valueOf(enddatefinal);
                pst.setString(5, date11);
                pst.setString(6, date12);
                String date = String.valueOf(startfinal);
                String date1 = String.valueOf(endfinal);
                pst.setString(7, date);
                pst.setString(8, date1);
                pst.setString(9, reservationPrice.getText());
                pst.execute();
                CloseMe();
            }
            

        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CloseMe();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void roomOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomOptActionPerformed
        itemNameCombo.removeAllItems();
        FillItemNameCombo();
    }//GEN-LAST:event_roomOptActionPerformed

    private void tableOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableOptActionPerformed
        itemNameCombo.removeAllItems();
        FillItemNameCombo();
    }//GEN-LAST:event_tableOptActionPerformed

    private void itemNameComboPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_itemNameComboPopupMenuWillBecomeInvisible
        roomOpt.setActionCommand("roomOpt");
        tableOpt.setActionCommand("tableOpt");
        String selectedItem = itemNameCombo.getSelectedItem().toString();
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/coworkingspacesreservation?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","root", "15264859");
            if ("roomOpt".equals(roomortable.getSelection().getActionCommand())){
                String query = "select * from rooms where room_name = '"+selectedItem+"'";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(query);
                while (rs.next()){
                    String room_id = rs.getString("room_id");
                    itemID.setText(room_id);
                }
            }
            else if ("tableOpt".equals(roomortable.getSelection().getActionCommand())){
                String query = "select * from tables where table_name = '"+selectedItem+"'";
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(query);
                while (rs.next()){
                    String table_id = rs.getString("table_id");
                    itemID.setText(table_id);
                }
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_itemNameComboPopupMenuWillBecomeInvisible

    private void jLabel15MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseMoved
        jLabel15.setIcon(new javax.swing.ImageIcon("icons8-close-window-30-ConvertImage.png"));
    }//GEN-LAST:event_jLabel15MouseMoved

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        CloseMe();
    }//GEN-LAST:event_jLabel15MouseClicked

    private void jLabel15MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseExited
        jLabel15.setIcon(new javax.swing.ImageIcon("icons8-close-window-30.png"));
    }//GEN-LAST:event_jLabel15MouseExited

    private void itemNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameComboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddReservation().setVisible(true);
            }
        });
    }
    
    private void CloseMe(){
        WindowEvent meClose = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(meClose);
    }
    
    public static String charRemoveAt(String str, int p) {  
              return str.substring(0, p) + str.substring(p + 1);  
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundBlue;
    private javax.swing.JTextField customerName;
    private com.toedter.calendar.JDateChooser fromdate;
    private javax.swing.JSpinner fromtime;
    private javax.swing.JSpinner fromtime1;
    private javax.swing.JTextField itemID;
    private javax.swing.JComboBox<String> itemNameCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField reservationPrice;
    private javax.swing.JRadioButton roomOpt;
    private javax.swing.ButtonGroup roomortable;
    private javax.swing.JRadioButton tableOpt;
    private com.toedter.calendar.JDateChooser todate;
    private javax.swing.JSpinner totime;
    private javax.swing.JSpinner totime1;
    // End of variables declaration//GEN-END:variables
}
